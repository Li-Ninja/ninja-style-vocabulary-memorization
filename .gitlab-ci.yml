stages:
    - build
    - docker-image
    - deploy

workflow:
  rules:
    - if: ($CI_COMMIT_TAG != null)
      when: always
    - when: never

# TODO testing
# testing:
#   stage: build
#   tags:
#     - dev-runner
#   image: node:14.17.2
#   script:
#     - echo "some code test"

build:
  stage: build
  tags:
    - dev-runner
  image: node:14.17.2
  # needs:
  #   - testing
  artifacts:
    expire_in: '2 weeks and 1 day'
    when: on_success
    paths:
      - dist
  script:
    - yarn install
    - yarn build

docker-image:
  stage: docker-image
  tags:
    - dev-runner
  image: docker:18.09.7
  dependencies:
    - build
  before_script:
    - echo -e "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"
  script:
    - docker build -t $CI_REGISTRY_IMAGE:vocabulary-frontend_v$CI_COMMIT_TAG .
    # push to gitlab registry
    - docker push $CI_REGISTRY_IMAGE:vocabulary-frontend_v$CI_COMMIT_TAG
  after_script:
    - docker rmi $CI_REGISTRY_IMAGE:wave-working-backend_v$CI_COMMIT_TAG
    - docker logout "$CI_REGISTRY"

deploy:
  stage: deploy
  tags:
    - dev-runner
  image: docker:stable
  before_script:
    - eval $(ssh-agent -s)
    - echo "$GCP_PRIVATE_KEY" | ssh-add -

  script:
    - scp -o StrictHostKeyChecking=no ./docker-compose.yml $GCP_USER@$GCP_VOCABULARY_FRONTEND_SERVER:/home/$GCP_USER
    - ssh -o StrictHostKeyChecking=no $GCP_USER@$GCP_VOCABULARY_FRONTEND_SERVER "
    - echo -e "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"

      export IMAGE_NAME=$CI_REGISTRY_IMAGE:vocabulary-frontend_v$CI_COMMIT_TAG
      export COMPOSE_PROJECT_NAME=front_stage

      docker-compose down &&
      docker-compose up -d
      "

  after_script:
  - docker logout "$CI_REGISTRY"
  environment:
    name: dev
    url: http://$GCP_VOCABULARY_FRONTEND_SERVER